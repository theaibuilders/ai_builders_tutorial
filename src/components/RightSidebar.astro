---
interface Props {
  headings: Array<{id: string, text: string, level: number}>;
}

const { headings } = Astro.props;
---

<div class="h-screen flex flex-col">
  <!-- Mobile Close Button -->
  <div class="lg:hidden flex items-center justify-between p-4 border-b border-dark-border">
    <h2 class="text-lg font-bold text-white">Table of Contents</h2>
    <button
      onclick="closeMobileToc()"
      class="p-2 rounded-lg hover:bg-dark-hover transition-colors"
      aria-label="Close table of contents"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>

  <!-- Fixed Header Section -->
  <div class="flex-shrink-0 lg:block hidden p-6 pb-4">
    <h2 class="text-sm font-semibold text-dark-text">
      On This Page
    </h2>
  </div>
  
  <!-- Scrollable Content Section -->
  <div class="flex-1 overflow-y-auto min-h-0 p-6 pt-4 lg:pt-6">
    {headings.length > 0 ? (
      <nav class="space-y-1" style="padding-bottom: 240px;">
        {headings.map((heading) => (
          <a
            href={`#${heading.id}`}
            class={`block py-2 px-3 lg:px-0 lg:py-1 text-sm transition-colors hover:text-dark-text rounded-lg lg:rounded-none hover:bg-dark-hover lg:hover:bg-transparent ${
              heading.level === 2 
                ? 'text-dark-secondary font-medium' 
                : 'text-dark-secondary pl-6 lg:pl-4'
            }`}
            data-heading-link={heading.id}
            onclick="closeMobileToc()"
          >
            {heading.text}
          </a>
        ))}
      </nav>
    ) : (
      <div class="text-center text-dark-secondary py-8">
        <svg class="w-8 h-8 mx-auto mb-2 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.674-2.583m0 0A7.962 7.962 0 014 9c0-1.933.685-3.708 1.826-5.074C7.178 2.564 9.5 2 12 2s4.822.564 6.174 1.926C19.315 5.292 20 7.067 20 9c0 1.933-.685 3.708-1.826 5.074M6.326 6.417" />
        </svg>
        <p class="text-xs">No headings found</p>
      </div>
    )}
  </div>

</div>

<!-- Community Call to Action Fixed at Bottom -->
<div class="fixed right-0 bottom-0 w-[340px] max-w-full px-6 pb-6 z-[9999]">
  <!-- Opaque Background Backdrop -->
  <div class="absolute inset-0 bg-dark-bg -z-10"></div>
  
  <!-- Section Breaker -->
  <div class="mb-4 border-t border-dark-border"></div>
  
  <div class="rounded-lg bg-dark-hover p-4 text-center border border-dark-border">
    <div class="text-sm text-white font-semibold mb-2">Interested in more tutorials and connect with other AI Builders?</div>
    <div class="text-sm text-dark-secondary mb-2">Join our community now</div>
  <a href="https://theaibuilders.dev/community" target="_blank" rel="noopener noreferrer" class="text-xs text-blue-300 underline break-all">theaibuilders.dev/community</a>
  </div>

  <!-- Deployed on Zeabur Badge under the community banner -->
  <div class="mt-3 flex justify-center">
    <a
      href="https://zeabur.com/referral?referralCode=aibuilders&utm_source=devondD3C"
      target="_blank"
      rel="noopener noreferrer"
      aria-label="Deployed on Zeabur"
    >
      <img
        src="https://zeabur.com/deployed-on-zeabur-dark.svg"
        alt="Deployed on Zeabur"
        class="h-8 w-auto opacity-90 hover:opacity-100 transition-opacity"
        loading="lazy"
      />
    </a>
  </div>
</div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Intersection Observer for active heading highlighting
    const headingLinks = document.querySelectorAll('[data-heading-link]');
    const headingElements = Array.from(headingLinks).map(link => {
      const id = link.getAttribute('data-heading-link');
      return { link, element: document.getElementById(id!) };
    }).filter(item => item.element);

    if (headingElements.length === 0) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const link = document.querySelector(`[data-heading-link="${id}"]`);
          
          if (link) {
            if (entry.isIntersecting) {
              // Remove active class from all links
              headingLinks.forEach(l => {
                l.classList.remove('text-blue-400', 'border-r-2', 'border-blue-400');
              });
              
              // Add active class to current link
              link.classList.add('text-blue-400', 'border-r-2', 'border-blue-400');
            }
          }
        });
      },
      {
        rootMargin: '-20% 0px -60% 0px',
        threshold: 0
      }
    );

    // Observe all heading elements
    headingElements.forEach(({ element }) => {
      if (element) observer.observe(element);
    });

    // Smooth scroll for heading links
    headingLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const id = link.getAttribute('data-heading-link');
        const target = document.getElementById(id!);
        
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without triggering navigation
          history.pushState(null, '', `#${id}`);
        }
      });
    });

    // Handle initial hash in URL
    if (window.location.hash) {
      const target = document.querySelector(window.location.hash);
      if (target) {
        setTimeout(() => {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }, 100);
      }
    }
  });
</script>

<style>
  /* Smooth scrolling for the entire page */
  :global(html) {
    scroll-behavior: smooth;
  }
  
  /* Custom scrollbar for the sidebar */
  ::-webkit-scrollbar {
    width: 4px;
  }
  
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  
  ::-webkit-scrollbar-thumb {
    background: theme('colors.dark.border');
    border-radius: 2px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: theme('colors.dark.hover');
  }
</style>
