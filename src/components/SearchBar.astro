---
import type { TutorialSection } from '../types/tutorial';

interface Props {
  sections: TutorialSection[];
  id?: string;
}

const { sections, id = 'main' } = Astro.props;

// Convert sections to searchable format for the client-side script
const searchableData = sections.flatMap(section =>
  section.files.map(file => ({
    title: file.metadata.title,
    // Normalize path: drop .md, .mdx, .ipynb extensions for routing
    path: file.path.replace(/\.(md|mdx|ipynb)$/i, ''),
    type: file.type === 'notebook' ? 'notebook' : 'markdown',
    description: file.metadata.description || '',
    section: section.name,
    content: file.content || '',
    // Extract searchable text from notebook cells if it's a notebook
    notebookText: file.notebook
      ? file.notebook.cells
          .filter((cell) => cell.cell_type === 'markdown' || cell.cell_type === 'code')
          .map((cell) => (Array.isArray(cell.source) ? cell.source.join('') : cell.source))
          .join(' ')
      : ''
  }))
);

// Serialize safely for embedding inside a <script> tag. Avoid '</script>' early termination.
function serializeForScript(data) {
  return JSON.stringify(data).replace(/<\/script>/gi, '<\\/script>');
}
const searchableDataJson = serializeForScript(searchableData);
---

<div class="relative" id={`search-container-${id}`}>
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg
        class="h-4 w-4 text-dark-secondary"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
        />
      </svg>
    </div>
    <input
      type="text"
      id={`search-input-${id}`}
      placeholder="Search tutorials..."
      class="w-full pl-10 pr-4 py-2 text-sm border border-dark-border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-dark-text placeholder-dark-secondary"
      style="background-color: #24282e;"
    />
    <div id={`search-loading-${id}`} class="absolute inset-y-0 right-0 pr-3 flex items-center hidden">
      <div class="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full"></div>
    </div>
  </div>

  <!-- Search Results Dropdown -->
  <div id={`search-results-${id}`} class="absolute z-50 w-full mt-2 bg-dark-bg border border-dark-border rounded-lg shadow-lg max-h-80 overflow-y-auto hidden">
    <!-- Results will be populated by JavaScript -->
  </div>
</div>

<!-- Search data for client-side script (only include once) -->
{id === 'desktop' && (
  <script type="application/json" id="search-data" set:html={searchableDataJson}></script>
)}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Real tutorial data from server (shared across all instances)
    const searchDataElement = document.getElementById('search-data');
    
    let tutorialData = [];
    try {
      tutorialData = JSON.parse(searchDataElement?.textContent || '[]');
    } catch (error) {
      console.error('Error parsing search data:', error);
    }

    function searchTutorials(query) {
      const lowercaseQuery = query.toLowerCase();
      const results = tutorialData.filter((tutorial) => {
        const matches = tutorial.title.toLowerCase().includes(lowercaseQuery) ||
          tutorial.description.toLowerCase().includes(lowercaseQuery) ||
          tutorial.section.toLowerCase().includes(lowercaseQuery) ||
          tutorial.content.toLowerCase().includes(lowercaseQuery) ||
          tutorial.notebookText.toLowerCase().includes(lowercaseQuery);
        
        return matches;
      });
      return results;
    }

    function renderResults(results, searchResultsElement, searchInputElement) {
      if (results.length === 0) {
        searchResultsElement.innerHTML = `
          <div class="p-4 text-center text-dark-secondary">
            <svg class="w-8 h-8 mx-auto mb-2 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 515.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.674-2.583m0 0A7.962 7.962 0 014 9c0-1.933.685-3.708 1.826-5.074C7.178 2.564 9.5 2 12 2s4.822.564 6.174 1.926C19.315 5.292 20 7.067 20 9c0-1.933-.685-3.708-1.826 5.074M6.326 6.417m0 0A7.962 7.962 0 0112 3" />
            </svg>
            <p class="text-sm">No tutorials found for "${searchInputElement.value}"</p>
          </div>
        `;
        return;
      }
      
      searchResultsElement.innerHTML = results.map(result => {
        const safePath = (result.path || '').replace(/\.(md|mdx|ipynb)$/i, '');
        return `
        <button
          class="w-full px-4 py-3 text-left hover:bg-dark-hover transition-colors border-b border-dark-border last:border-b-0"
          onclick="window.location.href='/tutorials/${safePath.replace(/'/g, "%27")}'"
        >
          <div class="flex items-start gap-3">
            <div class="flex-shrink-0 mt-0.5">
              <svg class="w-4 h-4 text-dark-secondary" fill="currentColor" viewBox="0 0 20 20">
                ${result.type === 'notebook' ? `
                  <path d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm0 2h12v10H4V5zm2 2a1 1 0 000 2h8a1 1 0 100-2H6zm0 3a1 1 0 000 2h8a1 1 0 100-2H6zm0 3a1 1 0 000 2h8a1 1 0 100-2H6z"/>
                ` : `
                  <path d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm0 2h12v10H4V5zm2 2v6l2-2 2 2V7H6z"/>
                `}
              </svg>
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center gap-2 mb-1">
                <h3 class="text-sm font-medium text-dark-text truncate">
                  ${result.title}
                </h3>
              </div>
              <div class="text-xs text-dark-secondary mb-1">
                ${result.section}
              </div>
              <p class="text-xs text-dark-secondary line-clamp-2">
                ${result.description}
              </p>
            </div>
          </div>
        </button>`;
      }).join('');
    }

    // Initialize all search instances on the page
    function initializeSearchInstance(instanceId) {
      const searchInput = document.getElementById(`search-input-${instanceId}`);
      const searchResults = document.getElementById(`search-results-${instanceId}`);
      const searchLoading = document.getElementById(`search-loading-${instanceId}`);
      
      if (!searchInput || !searchResults || !searchLoading) {
        return; // Skip if elements don't exist
      }

  let searchTimeout;
      
      searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        
        clearTimeout(searchTimeout);
        
        if (!query) {
          searchResults.classList.add('hidden');
          searchLoading.classList.add('hidden');
          return;
        }
        
        searchLoading.classList.remove('hidden');
        
        searchTimeout = setTimeout(() => {
          const results = searchTutorials(query);
          renderResults(results, searchResults, searchInput);
          searchResults.classList.remove('hidden');
          searchLoading.classList.add('hidden');
        }, 300);
      });
      
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          searchResults.classList.add('hidden');
          searchInput.blur();
        }
      });
      
      // Close search results when clicking outside
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.classList.add('hidden');
        }
      });
    }

    // Initialize all search instances
    const searchContainers = document.querySelectorAll('[id^="search-container-"]');
    searchContainers.forEach(container => {
      const instanceId = container.id.replace('search-container-', '');
      initializeSearchInstance(instanceId);
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
