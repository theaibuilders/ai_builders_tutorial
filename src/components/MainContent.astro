---
import type { TutorialFile } from '../types/tutorial';
import nb from 'notebookjs';
import { getHighlighter } from 'shiki';

// Format date as 'Month Day Year' (e.g., May 25 2025)
function formatDateMDY(dateString) {
  const date = new Date(dateString);
  const month = date.toLocaleString('en-US', { month: 'long' });
  const day = date.getDate();
  const year = date.getFullYear();
  return `${month} ${day} ${year}`;
}

interface Props {
  currentFile?: TutorialFile;
}

const { currentFile } = Astro.props;

// Function to enhance notebook outputs - only highlight actual code blocks, not plain text
function enhanceNotebookOutputs(notebookHtml: string): string {
  // Look for output content that contains markdown-style code blocks (```)
  return notebookHtml.replace(/(<div[^>]*class="[^"]*nb-output[^"]*"[^>]*>)(.*?)(<\/div>)/gs, (match, openTag, content, closeTag) => {
    // Only process content that contains markdown-style code blocks (```)
    if (content.includes('```')) {
      // Process markdown-style code blocks in the output
      let enhancedContent = content.replace(/```(\w+)?\n([\s\S]*?)```/g, (codeMatch, language, code) => {
        const lang = language || 'python';
        const highlightedCode = highlightPythonCodeServerSide(code.trim());
        
        return `<div class="code-block border border-gray-600 rounded-lg overflow-hidden" style="background-color: #1f2123;"><div class="p-2 overflow-x-auto"><pre class="text-sm"><code>${highlightedCode}</code></pre></div></div>`;
      });
      
      return openTag + enhancedContent + closeTag;
    }
    // Return unchanged if no code blocks found - this preserves plain text outputs
    return match;
  });
}

// Server-side Python highlighting function (disabled for output cells to prevent color codes)
function highlightPythonCodeServerSide(code: string): string {
  if (!code) return '';
  
  // Just escape HTML entities without applying syntax highlighting to avoid color codes in output
  let escaped = code
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
  
  return escaped;
}

// Professional notebook rendering using notebookjs
function renderNotebookWithProfessionalTools(notebook: any): string {
  if (!notebook || !notebook.cells) {
    return '<div class="text-center text-red-400 py-8"><p>Invalid notebook format</p></div>';
  }
  
  try {
    // Create a new notebook renderer instance
    const renderer = nb.parse(notebook);
    let notebookHtml = renderer.render().outerHTML;
    
    // Remove the first H1 heading from the notebook content since it's already shown in the page header
    notebookHtml = notebookHtml.replace(/<h1[^>]*>.*?<\/h1>/i, '');
    
    // Post-process the notebook HTML to enhance output cells with code highlighting
    notebookHtml = enhanceNotebookOutputs(notebookHtml);
    
    // Apply our custom styling to the professional output with copy buttons
    return `
      <div class="professional-notebook">
        <style>
          /* Enhanced notebook styling with working copy buttons and scrolling */
          .professional-notebook .nb-cell {
            margin-bottom: 1.5rem;
            border-radius: 8px;
            overflow: visible;
            position: relative;
          }
          .professional-notebook .nb-input {
            background-color: #24282e !important;
            border: 1px solid rgba(75, 85, 99, 0.5);
            border-radius: 8px;
            margin-bottom: 0.5rem;
            position: relative;
            overflow: visible;
          }
          
          /* Code cells - target cells that have nb-input (which are code cells) */
          .professional-notebook .nb-cell:has(.nb-input) {
            background-color: #24282e !important;
            border: 1px solid rgba(75, 85, 99, 0.3);
            border-radius: 8px;
            position: relative;
          }
          
          /* Fallback for browsers without :has() support */
          .professional-notebook .nb-input {
            background-color: #24282e !important;
            border: 1px solid rgba(75, 85, 99, 0.3);
            position: relative;
          }
          
          /* Force background on all code-related elements */
          .professional-notebook .nb-cell .nb-input,
          .professional-notebook .nb-input,
          .nb-input {
            background-color: #24282e !important;
          }
          
          /* Additional comprehensive selectors for code cells */
          .professional-notebook .nb-cell[data-cell-type="code"],
          .professional-notebook .nb-cell.nb-cell-type-code,
          .professional-notebook .nb-cell:has(pre),
          .professional-notebook .nb-cell:has(code),
          .professional-notebook div[class*="nb-input"],
          .professional-notebook div[class*="code"],
          .professional-notebook pre,
          .professional-notebook .nb-source {
            background-color: #24282e !important;
          }
          
          /* Force background on any element containing code */
          .professional-notebook * {
            --code-bg: #24282e;
          }
          
          .professional-notebook [style*="background"] {
            background-color: #24282e !important;
          }
          
          /* Copy button for code cells */
          .professional-notebook .nb-input::before {
            content: '';
            position: absolute;
            top: 8px;
            right: 8px;
            width: 32px;
            height: 32px;
            background: url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="%23a1a1aa"><path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>') center/16px no-repeat;
            border-radius: 4px;
            background-color: rgba(55, 65, 81, 0.8);
            cursor: pointer;
            opacity: 0.7;
            transition: all 0.2s ease;
            z-index: 10;
          }
          .professional-notebook .nb-input:hover::before {
            opacity: 1;
            background-color: rgba(75, 85, 99, 0.8);
          }
          .professional-notebook .nb-input::after {
            content: 'Copy code';
            position: absolute;
            top: 45px;
            right: 8px;
            background: rgba(17, 24, 39, 0.95);
            color: #d1d5db;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-family: ui-sans-serif, system-ui;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s ease;
            z-index: 10;
            white-space: nowrap;
          }
          .professional-notebook .nb-input:hover::after {
            opacity: 1;
          }
          .copy-success::after {
            content: 'Copied!' !important;
            color: #22c55e !important;
          }
          .professional-notebook .nb-input-prompt {
            background-color: rgba(29, 78, 216, 0.1);
            color: #60a5fa;
            padding: 0.5rem;
            font-family: ui-monospace, monospace;
            font-size: 0.75rem;
            border-right: 1px solid rgba(75, 85, 99, 0.5);
            min-width: 4rem;
          }
          .professional-notebook .nb-output {
            background-color: #1f2123 !important;
            border: 1px solid rgba(75, 85, 99, 0.3);
            border-radius: 8px;
            margin-top: 0.5rem;
          }
          .professional-notebook .nb-output-prompt {
            background-color: rgba(220, 38, 38, 0.1);
            color: #fca5a5;
            padding: 0.5rem;
            font-family: ui-monospace, monospace;
            font-size: 0.75rem;
            border-right: 1px solid rgba(75, 85, 99, 0.5);
            min-width: 4rem;
          }
          .professional-notebook .nb-markdown {
            color: #e5e7eb;
            padding: 1.5rem;
            line-height: 1.8;
          }
          /* Universal heading styles based on markdown hierarchy - applies to all content */
          .professional-notebook h1, h1 {
            color: #ffffff;
            font-size: 2.25rem; /* text-4xl */
            font-weight: 800; /* font-extrabold */
            margin-bottom: 2rem;
            margin-top: 3rem;
            padding-bottom: 1rem;
            line-height: 1.2;
          }
          .professional-notebook h2, h2 {
            color: #ffffff;
            font-size: 1.875rem; /* text-3xl */
            font-weight: 700; /* font-bold */
            margin-bottom: 1.5rem;
            margin-top: 2.5rem;
            padding-bottom: 0.75rem;
            line-height: 1.3;
          }
          .professional-notebook h3, h3 {
            color: #ffffff;
            font-size: 1.5rem; /* text-2xl */
            font-weight: 600; /* font-semibold */
            margin-bottom: 1rem;
            margin-top: 2rem;
            padding-bottom: 0.5rem;
            line-height: 1.4;
          }
          .professional-notebook h4, h4 {
            color: #ffffff;
            font-size: 1.25rem; /* text-xl */
            font-weight: 600; /* font-semibold */
            margin-bottom: 0.75rem;
            margin-top: 1.5rem;
            line-height: 1.4;
          }
          .professional-notebook h5, h5 {
            color: #ffffff;
            font-size: 1.125rem; /* text-lg */
            font-weight: 600; /* font-semibold */
            margin-bottom: 0.5rem;
            margin-top: 1.25rem;
            line-height: 1.5;
          }
          .professional-notebook h6, h6 {
            color: #ffffff;
            font-size: 1rem; /* text-base */
            font-weight: 600; /* font-semibold */
            margin-bottom: 0.5rem;
            margin-top: 1rem;
            line-height: 1.5;
          }
          /* Universal paragraph and text styles */
          .professional-notebook p, p {
            margin-bottom: 1.25rem;
            color: #d1d5db;
            line-height: 1.7;
            font-size: 1rem;
          }
          
          /* Universal list styles based on markdown syntax */
          .professional-notebook ul, ul,
          .professional-notebook ol, ol {
            margin: 1.5rem 0;
            padding-left: 0;
            list-style: none;
          }
          .professional-notebook li, li {
            margin-bottom: 0.75rem;
            color: #d1d5db;
            line-height: 1.7;
            position: relative;
            padding-left: 1.5rem;
            font-size: 1rem;
          }
          
          /* Bullet point styling for unordered lists */
          .professional-notebook ul li::before, ul li::before {
            content: "•";
            color: #60a5fa;
            font-weight: bold;
            position: absolute;
            left: 0;
            top: 0;
            font-size: 1.1rem;
          }
          
          /* Numbered list styling */
          .professional-notebook ol, ol {
            counter-reset: list-counter;
          }
          .professional-notebook ol li, ol li {
            counter-increment: list-counter;
          }
          .professional-notebook ol li::before, ol li::before {
            content: counter(list-counter) ".";
            color: #60a5fa;
            font-weight: bold;
            position: absolute;
            left: 0;
            top: 0;
            font-size: 1rem;
          }
          
          /* Nested list styles with different bullet types */
          .professional-notebook ul ul li::before, ul ul li::before {
            content: "◦";
            color: #93c5fd;
            font-size: 1rem;
          }
          .professional-notebook ul ul ul li::before, ul ul ul li::before {
            content: "▪";
            color: #ddd6fe;
            font-size: 0.9rem;
          }
          .professional-notebook .nb-markdown code {
            background-color: rgba(55, 65, 81, 0.6);
            color: #93c5fd;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
          }
          .professional-notebook .nb-markdown pre {
            background-color: #24282e !important;
            border: 1px solid rgba(75, 85, 99, 0.5);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar-thumb {
            background: rgba(75, 85, 99, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar-thumb:hover {
            background: rgba(75, 85, 99, 0.7);
          }
          .professional-notebook .nb-markdown pre code {
            background: none;
            padding: 0;
            border-radius: 0;
            color: #e5e7eb;
          }
          /* Enhanced code styling with comprehensive horizontal scrolling */
          .professional-notebook .nb-source {
            color: #e5e7eb;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
            line-height: 1.5;
            padding: 1rem;
            white-space: pre;
            overflow-x: auto;
            overflow-y: visible;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
            word-wrap: normal;
            word-break: normal;
            min-width: 0;
            background-color: transparent !important;
          }
          }
          .professional-notebook .nb-source::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-source::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-source::-webkit-scrollbar-thumb {
            background: rgba(75, 85, 99, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-source::-webkit-scrollbar-thumb:hover {
            background: rgba(75, 85, 99, 0.7);
          }
          
          /* Ensure all code elements can scroll horizontally */
          .professional-notebook pre,
          .professional-notebook code {
            overflow-x: auto;
            white-space: pre;
            word-wrap: normal;
            word-break: normal;
          }
          
          /* Fix any containers that might prevent scrolling */
          .professional-notebook .nb-input,
          .professional-notebook .nb-cell {
            overflow: visible;
            min-width: 0;
          }
          .professional-notebook .nb-output-text {
            color: #e5e7eb;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
            padding: 0.5rem;
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow-wrap: break-word;
            overflow-x: visible;
            background: none;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar-thumb {
            background: rgba(75, 85, 99, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar-thumb:hover {
            background: rgba(75, 85, 99, 0.7);
          }
          .professional-notebook .nb-output-error {
            color: #ef4444;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
            padding: 1rem;
            white-space: pre-wrap;
            background-color: rgba(220, 38, 38, 0.15);
            border-radius: 6px;
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar-track {
            background: rgba(220, 38, 38, 0.2);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar-thumb {
            background: rgba(220, 38, 38, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar-thumb:hover {
            background: rgba(220, 38, 38, 0.7);
          }
          .professional-notebook .nb-cell-type-markdown {
            border: none;
            background: none;
          }
          .professional-notebook a {
            color: #60a5fa;
          }
          .professional-notebook a:hover {
            color: #93c5fd;
          }
          .professional-notebook ul, .professional-notebook ol {
            margin: 1.5rem 0;
            padding-left: 0;
            list-style: none;
          }
          .professional-notebook li {
            margin-bottom: 0.75rem;
            color: #d1d5db;
            line-height: 1.7;
            position: relative;
            padding-left: 1.5rem;
          }
          .professional-notebook ul li::before {
            content: "•";
            color: #60a5fa;
            font-weight: bold;
            position: absolute;
            left: 0;
            top: 0;
          }
          .professional-notebook ol {
            counter-reset: list-counter;
          }
          .professional-notebook ol li {
            counter-increment: list-counter;
          }
          .professional-notebook ol li::before {
            content: counter(list-counter) ".";
            color: #60a5fa;
            font-weight: bold;
            position: absolute;
            left: 0;
            top: 0;
          }
          /* Nested list spacing */
          .professional-notebook ul ul, ul ul,
          .professional-notebook ol ol, ol ol {
            margin: 0.5rem 0;
            padding-left: 1.5rem;
          }
          .professional-notebook ul ul li, ul ul li,
          .professional-notebook ol ol li, ol ol li {
            margin-bottom: 0.5rem;
          }
          /* Universal text formatting styles */
          .professional-notebook strong, strong,
          .professional-notebook .nb-markdown strong {
            font-weight: 600;
            color: #ffffff;
          }
          .professional-notebook em, em,
          .professional-notebook .nb-markdown em {
            font-style: italic;
            color: #93c5fd;
          }
          
          /* Universal code styling */
          .professional-notebook code, code {
            background-color: rgba(55, 65, 81, 0.6);
            color: #93c5fd;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
          }
          
          /* Ultra-specific overrides to ensure code cell background is correct */
          .professional-notebook .nb-cell.nb-cell-type-code,
          .professional-notebook .nb-input,
          .professional-notebook .nb-cell:has(.nb-input),
          .professional-notebook [class*="nb-input"],
          .professional-notebook [class*="code-cell"],
          .professional-notebook pre,
          div[class*="nb-input"],
          div[class*="nb-cell"]:has(pre),
          div[class*="nb-cell"]:has(code) {
            background-color: #24282e !important;
          }
          
          /* Force via CSS custom properties */
          :root {
            --notebook-code-bg: #24282e;
          }
          
          /* Re-apply transparent backgrounds to markdown elements to match app background */
          .professional-notebook .nb-markdown,
          .professional-notebook .nb-markdown p,
          .professional-notebook .nb-markdown span,
          .professional-notebook .nb-markdown div,
          .professional-notebook .nb-markdown h1,
          .professional-notebook .nb-markdown h2,
          .professional-notebook .nb-markdown h3,
          .professional-notebook .nb-markdown h4,
          .professional-notebook .nb-markdown h5,
          .professional-notebook .nb-markdown h6,
          .professional-notebook .nb-markdown ul,
          .professional-notebook .nb-markdown ol,
          .professional-notebook .nb-markdown li,
          .professional-notebook .nb-markdown blockquote,
          .professional-notebook .nb-cell-type-markdown,
          .professional-notebook .nb-cell:not(:has(.nb-input)),
          .professional-notebook .nb-cell .nb-markdown {
            background-color: transparent !important;
          }
          
          /* Ensure markdown cells match app background */
          .professional-notebook .nb-cell-type-markdown,
          .professional-notebook .nb-cell:not(.nb-cell-type-code),
          .notebook-cell.markdown-cell,
          .notebook-cell .cell-content,
          .markdown-cell {
            background-color: #1f2123 !important;
          }
          
          /* Also ensure fallback markdown cells are transparent */
          .notebook-cell.markdown-cell .cell-content,
          .cell-content.prose {
            background-color: transparent !important;
          }
          
          /* Force output cells to have the new background color */
          .professional-notebook .nb-output,
          .output-display-data,
          .output-stream,
          .output-plain,
          .cell-output,
          .notebook-cell .cell-output {
            background-color: #1f2123 !important;
          }
          
          /* Ensure code blocks within output cells have no background and wrap text */
          .professional-notebook .nb-output .code-block,
          .output-display-data .code-block,
          .output-stream .code-block,
          .output-plain .code-block,
          .cell-output .code-block,
          .notebook-cell .cell-output .code-block,
          .markdown-output .code-block,
          .professional-notebook .nb-output pre,
          .output-display-data pre,
          .markdown-output pre {
            background: none !important;
            background-color: transparent !important;
            color: #e5e7eb !important;
            white-space: pre-wrap !important;
            word-wrap: break-word !important;
            overflow-wrap: break-word !important;
            overflow-x: visible !important;
            border: none !important;
          }
          
          /* Also apply to code elements within output cells */
          .professional-notebook .nb-output code,
          .output-display-data code,
          .output-stream code,
          .output-plain code,
          .cell-output code,
          .notebook-cell .cell-output code,
          .markdown-output code {
            background: none !important;
            background-color: transparent !important;
            color: #e5e7eb !important;
            padding: 0 !important;
            white-space: pre-wrap !important;
            word-wrap: break-word !important;
            overflow-wrap: break-word !important;
          }
          
          /* Override the general pre/code rules specifically for output cells */
          .professional-notebook .nb-output pre,
          .professional-notebook .nb-output code,
          .output-display-data pre,
          .output-display-data code,
          .output-stream pre,
          .output-stream code,
          .output-plain pre,
          .output-plain code,
          .cell-output pre,
          .cell-output code,
          .notebook-cell .cell-output pre,
          .notebook-cell .cell-output code,
          .markdown-output pre,
          .markdown-output code {
            white-space: pre-wrap !important;
            word-wrap: break-word !important;
            overflow-wrap: break-word !important;
            word-break: break-word !important;
            overflow-x: visible !important;
            max-width: 100% !important;
          }
          
          /* Ensure output cell containers allow text wrapping */
          .professional-notebook .nb-output,
          .output-display-data,
          .output-stream,
          .output-plain,
          .cell-output,
          .notebook-cell .cell-output,
          .markdown-output {
            max-width: 100% !important;
            overflow-wrap: break-word !important;
            word-wrap: break-word !important;
            white-space: pre-wrap !important;
          }
          
          /* Reduce spacing between markdown display outputs */
          .professional-notebook .nb-output .rendered_html h1,
          .professional-notebook .nb-output .rendered_html h2,
          .professional-notebook .nb-output .rendered_html h3,
          .professional-notebook .nb-output .rendered_html h4,
          .professional-notebook .nb-output .rendered_html h5,
          .professional-notebook .nb-output .rendered_html h6,
          .markdown-output h1,
          .markdown-output h2,
          .markdown-output h3,
          .markdown-output h4,
          .markdown-output h5,
          .markdown-output h6 {
            margin-top: 0.1rem !important;
            margin-bottom: 0.1rem !important;
            line-height: 1.2 !important;
          }
          
          .professional-notebook .nb-output .rendered_html p,
          .professional-notebook .nb-output .rendered_html ul,
          .professional-notebook .nb-output .rendered_html ol,
          .professional-notebook .nb-output .rendered_html blockquote,
          .markdown-output p,
          .markdown-output ul,
          .markdown-output ol,
          .markdown-output blockquote {
            margin-top: 0.05rem !important;
            margin-bottom: 0.05rem !important;
            line-height: 1.3 !important;
          }
          
          .professional-notebook .nb-output .rendered_html hr,
          .markdown-output hr {
            margin-top: 0.1rem !important;
            margin-bottom: 0.1rem !important;
          }
          
          /* Reduce spacing between output cells */
          .professional-notebook .nb-output,
          .output-display-data,
          .output-stream,
          .output-plain,
          .cell-output,
          .notebook-cell .cell-output,
          .markdown-output {
            margin-bottom: 0.2rem !important;
            padding-bottom: 0.1rem !important;
          }
          
          /* Reduce spacing for list items */
          .professional-notebook .nb-output .rendered_html li,
          .markdown-output li {
            margin-bottom: 0.05rem !important;
            line-height: 1.3 !important;
          }
          
          /* Ultra-aggressive spacing reduction for all output content */
          .professional-notebook .nb-output *,
          .output-display-data *,
          .output-stream *,
          .output-plain *,
          .cell-output *,
          .notebook-cell .cell-output *,
          .markdown-output * {
            margin-top: 0 !important;
            margin-bottom: 0 !important;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
            line-height: 1.2 !important;
          }
          
          /* Specific targeting for numbered lists and paragraphs */
          .professional-notebook .nb-output .rendered_html ol,
          .professional-notebook .nb-output .rendered_html ul,
          .professional-notebook .nb-output .rendered_html div,
          .professional-notebook .nb-output .rendered_html span,
          .markdown-output ol,
          .markdown-output ul,
          .markdown-output div,
          .markdown-output span {
            margin: 0 !important;
            padding: 0 !important;
            line-height: 1.1 !important;
          }
          
          /* Override any default browser spacing */
          .professional-notebook .nb-output .rendered_html p + p,
          .professional-notebook .nb-output .rendered_html li + li,
          .markdown-output p + p,
          .markdown-output li + li {
            margin-top: 0 !important;
          }
        </style>
        ${notebookHtml}
      </div>
    `;
  } catch (error) {
    console.error('Professional notebook rendering failed:', error);
    // Fallback to our custom renderer
    return renderNotebookFallback(notebook);
  }
}

// Fallback renderer in case professional tools fail
function renderNotebookFallback(notebook: any): string {
  if (!notebook || !notebook.cells) {
    return '<div class="text-center text-red-400 py-8"><p>Invalid notebook format</p></div>';
  }
  
  let isFirstMarkdownCell = true;
  
  const cellsHtml = notebook.cells.map((cell: any, index: number) => {
    const cellId = `cell-${index}`;
    const source = Array.isArray(cell.source) ? cell.source.join('') : cell.source || '';
    
    switch (cell.cell_type) {
      case 'markdown':
        const result = renderMarkdownCellFallback(source, cellId, isFirstMarkdownCell);
        if (isFirstMarkdownCell) isFirstMarkdownCell = false;
        return result;
      case 'code':
        return renderCodeCellFallback(source, cellId, cell.execution_count, cell.outputs);
      default:
        return '';
    }
  }).join('\n');
  
  return cellsHtml;
}

function renderMarkdownCellFallback(source: string | string[], cellId: string, isFirstMarkdownCell: boolean = false): string {
  const sourceText = Array.isArray(source) ? source.join('\n') : source || '';
  
  // Function to generate heading ID
  function generateHeadingId(text: string): string {
    return text.toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }
  
  // Enhanced markdown parsing for notebook cells with proper spacing
  // Only remove the first # heading from the very first markdown cell since it's already shown in the page header
  let contentWithoutFirstTitle = sourceText;
  if (isFirstMarkdownCell) {
    contentWithoutFirstTitle = sourceText.replace(/^# .*$/m, '');
  }
  
  let markdownHtml = contentWithoutFirstTitle
    // Handle code blocks first
      .replace(/```(\w+)?\n([\s\S]*?)```/g, (match, language, code) => {
        const lang = language || 'typescript';
        const highlightedCode = highlightPythonCode(code.trim());
      
        return `
          <div class="code-block border border-gray-600 rounded-lg overflow-hidden my-4" style="background-color: #1f2123;">
            <div class="flex items-center justify-between px-4 py-2 bg-gray-700/30 border-b border-gray-600">
              <span class="text-xs text-gray-400 font-mono">${lang}</span>
            </div>
            <div class="p-2 overflow-x-auto">
              <pre class="text-sm"><code>${highlightedCode}</code></pre>
            </div>
          </div>
        `;
      })
    // Handle headers with proper spacing and consistent font sizes
    .replace(/^###### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h6 id="${id}" class="text-base font-semibold mb-2 mt-4 text-white">${text}</h6>`;
    })
    .replace(/^##### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h5 id="${id}" class="text-lg font-semibold mb-3 mt-5 text-white">${text}</h5>`;
    })
    .replace(/^#### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h4 id="${id}" class="text-xl font-semibold mb-3 mt-6 text-white">${text}</h4>`;
    })
    .replace(/^### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h3 id="${id}" class="text-2xl font-semibold mb-4 mt-8 text-white pb-2">${text}</h3>`;
    })
    .replace(/^## (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h2 id="${id}" class="text-3xl font-bold mb-6 mt-10 text-white pb-3">${text}</h2>`;
    })
    .replace(/^# (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h1 id="${id}" class="text-4xl font-extrabold mb-8 mt-6 text-white pb-4">${text}</h1>`;
    })
    // Handle inline elements
  .replace(/`([^`]+)`/g, '<code class="text-blue-300 text-sm font-mono" style="background:none;padding:0;border-radius:0">$1</code>')
    .replace(/\*\*(.*?)\*\*/gim, '<strong class="font-semibold text-white">$1</strong>')
    .replace(/\*(.*?)\*/gim, '<em class="italic text-blue-200">$1</em>')
    .replace(/\[([^\]]*)\]\(([^)]*)\)/gim, '<a href="$2" class="text-blue-400 hover:text-blue-300">$1</a>');
  
  // Process bullet points with proper nesting
  const lines = markdownHtml.split('\n');
  const processedLines = [];
  let inList = false;
  let listStack = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const trimmedLine = line.trim();
    
    const bulletMatch = line.match(/^(\s*)([-*+])\s+(.+)$/);
    const numberMatch = line.match(/^(\s*)(\d+\.)\s+(.+)$/);
    
    if (bulletMatch || numberMatch) {
      const match = bulletMatch || numberMatch;
      const indent = match[1].length;
      const content = match[3];
      const isNumbered = !!numberMatch;
      const level = Math.floor(indent / 2);
      
      if (!inList) {
        inList = true;
        listStack = [{ level, isNumbered }];
        processedLines.push(`<${isNumbered ? 'ol' : 'ul'} class="mb-6 space-y-2">`);
      } else {
        // Only close lists that are deeper (greater level). Using >= caused a new <ol>
        // to be created for every sibling item, resetting numbering to 1 each time.
        while (listStack.length > 0 && listStack[listStack.length - 1].level > level) {
          const lastList = listStack.pop();
          processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
        }
        
        if (listStack.length === 0 || listStack[listStack.length - 1].level < level) {
          listStack.push({ level, isNumbered });
          processedLines.push(`<${isNumbered ? 'ol' : 'ul'} class="mt-2 space-y-1">`);
        }
      }
      
      processedLines.push(`<li class="text-gray-300 leading-relaxed">${content}</li>`);
    } else {
      if (inList) {
        while (listStack.length > 0) {
          const lastList = listStack.pop();
          processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
        }
        inList = false;
      }
      
      if (trimmedLine === '') {
        processedLines.push('');
      } else if (!trimmedLine.startsWith('<')) {
        processedLines.push(`<p class="mb-6 text-gray-300 leading-loose">${line}</p>`);
      } else {
        processedLines.push(line);
      }
    }
  }
  
  while (listStack.length > 0) {
    const lastList = listStack.pop();
    processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
  }
  
  const finalHtml = processedLines.join('\n');
  
  return `
    <div class="notebook-cell markdown-cell mb-4" data-cell-id="${cellId}">
      <div class="cell-content prose prose-dark dark:prose-dark max-w-none">
        ${finalHtml}
      </div>
    </div>
  `;
}

// Function to process markdown content and highlight code blocks
function processMarkdownWithCodeHighlighting(markdown: string): string {
  if (!markdown) return '';
  
  // Process markdown and extract code blocks for highlighting
  let processedMarkdown = markdown
    // Handle headers
    .replace(/^### (.*$)/gim, '<h3 class="text-lg font-semibold text-white mb-3 mt-6">$1</h3>')
    .replace(/^## (.*$)/gim, '<h2 class="text-xl font-semibold text-white mb-4 mt-8">$1</h2>')
    .replace(/^# (.*$)/gim, '<h1 class="text-2xl font-bold text-white mb-4 mt-8">$1</h1>')
    // Handle bold and italic
    .replace(/\*\*(.*?)\*\*/gim, '<strong class="font-semibold text-white">$1</strong>')
    .replace(/\*(.*?)\*/gim, '<em class="italic text-blue-200">$1</em>')
    // Handle links
    .replace(/\[([^\]]*)\]\(([^)]*)\)/gim, '<a href="$2" class="text-blue-400 hover:text-blue-300 underline">$1</a>');

  // Handle code blocks with syntax highlighting
  processedMarkdown = processedMarkdown.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, language, code) => {
    const lang = language || 'python';
    const highlightedCode = highlightPythonCode(code.trim());
    
    return `
      <div class="code-block border border-gray-600 rounded-lg overflow-hidden my-4" style="background-color: #1f2123;">
        <div class="flex items-center justify-between px-4 py-2 bg-gray-700/30 border-b border-gray-600">
          <span class="text-xs text-gray-400 font-mono">${lang}</span>
        </div>
        <div class="p-2 overflow-x-auto">
          <pre class="text-sm"><code>${highlightedCode}</code></pre>
        </div>
      </div>
    `;
  });

  // Handle inline code
  processedMarkdown = processedMarkdown.replace(/`([^`]+)`/g, '<code class="bg-gray-800/60 text-blue-300 px-2 py-1 rounded text-sm font-mono">$1</code>');

  // Handle paragraphs
  const lines = processedMarkdown.split('\n');
  const processedLines = [];
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    if (trimmedLine === '' || trimmedLine.startsWith('<')) {
      processedLines.push(line);
    } else {
      processedLines.push(`<p class="mb-4 text-gray-300 leading-relaxed">${line}</p>`);
    }
  }
  
  return processedLines.join('\n');
}

function renderCodeCellFallback(source: string | string[], cellId: string, executionCount: number | null, outputs: any[]): string {
  const sourceText = Array.isArray(source) ? source.join('\n') : source || '';
  const highlightedCode = highlightPython(sourceText);
  
  let outputsHtml = '';
  if (outputs && outputs.length > 0) {
    const outputContent = outputs.map(output => {
      if (output.output_type === 'stream') {
        const text = Array.isArray(output.text) ? output.text.join('') : output.text || '';
        return `
          <div class="output-stream border border-gray-600 rounded-lg p-2 mt-2" style="background-color: #1f2123;">
            <pre class="text-green-300 font-mono text-sm whitespace-pre-wrap">${text.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
          </div>
        `;
      } else if (output.output_type === 'display_data' || output.output_type === 'execute_result') {
        // Handle display_data and execute_result outputs that might contain markdown with code blocks
        if (output.data && output.data['text/markdown']) {
          const markdownText = Array.isArray(output.data['text/markdown']) 
            ? output.data['text/markdown'].join('') 
            : output.data['text/markdown'];
          
          // Process markdown and highlight code blocks
          const processedMarkdown = processMarkdownWithCodeHighlighting(markdownText);
          
          return `
            <div class="output-display-data border border-gray-600 rounded-lg p-2 mt-2" style="background-color: #1f2123;">
              <div class="markdown-output">${processedMarkdown}</div>
            </div>
          `;
        } else if (output.data && output.data['text/plain']) {
          const plainText = Array.isArray(output.data['text/plain']) 
            ? output.data['text/plain'].join('') 
            : output.data['text/plain'];
          
          return `
            <div class="output-plain border border-gray-600 rounded-lg p-2 mt-2" style="background-color: #1f2123;">
              <pre class="text-gray-300 font-mono text-sm whitespace-pre-wrap">${plainText.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
            </div>
          `;
        }
      }
      return '';
    }).join('\n');
    
    if (outputContent.trim()) {
      outputsHtml = outputContent;
    }
  }
  
  const escapedSource = sourceText
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/\"/g, '&quot;')
    .replace(/'/g, '&#39;');
  
  return `
    <div class="notebook-cell code-cell mb-4" data-cell-id="${cellId}">
      <div class="code-block relative border border-gray-700 rounded-lg overflow-hidden" style="background-color: #24282e;">
        <div class="flex items-center justify-between px-4 py-2 bg-gray-800/50 border-b border-gray-700">
          <span class="text-xs text-gray-400 font-mono">Python</span>
          <copy-button class="copy-btn" data-content="${escapedSource}"></copy-button>
        </div>
        <div class="code-content p-2 overflow-x-auto">
          <pre class="language-python text-sm"><code>${highlightedCode}</code></pre>
        </div>
      </div>
      ${outputsHtml}
    </div>
  `;
}

function highlightPython(code: string): string {
  // Simple fallback highlighting for server-side rendering
  // The main highlighting will be done client-side with the professional renderer
  let cleanCode = Array.isArray(code) ? code.join('\n') : code || '';
  
  // Just escape HTML entities for safety
  return cleanCode
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/&/g, '&amp;');
}

// Cache a Shiki highlighter for MD/MDX code blocks
let mdxHighlighter: any | null = null;
async function ensureMdxHighlighter() {
  if (!mdxHighlighter) {
    mdxHighlighter = await getHighlighter({
      themes: ['github-dark'],
      // Add yaml & dockerfile so tutorials can highlight config.yml and Dockerfile snippets
      langs: ['bash', 'shell', 'sh', 'typescript', 'javascript', 'ts', 'js', 'python', 'py', 'json', 'markdown', 'yaml', 'yml', 'dockerfile', 'docker', 'html', 'xml']
    });
  }
  return mdxHighlighter;
}

function normalizeLang(lang?: string): string {
  const l = (lang || '').toLowerCase();
  if (l === 'ts') return 'typescript';
  if (l === 'js') return 'javascript';
  if (l === 'sh' || l === 'shell') return 'bash';
  if (l === 'py') return 'python';
  if (l === 'yml') return 'yaml';
  if (l === 'docker') return 'dockerfile';
  if (l === 'htm') return 'html';
  return l || 'text';
}

// Enhanced markdown/MDX rendering with Shiki syntax highlighting and copy buttons
async function renderEnhancedMarkdown(markdown: string): Promise<string> {
  if (!markdown) return '<div class="text-center text-gray-400 py-8"><p>No content available</p></div>';
  
  // Function to generate heading ID
  function generateHeadingId(text: string): string {
    return text.toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }
  
  // Function to generate highlighted code block using Shiki (prevents style text leakage)
  async function createCodeBlock(language: string, code: string): Promise<string> {
    const lang = normalizeLang(language);
    const highlighter = await ensureMdxHighlighter();
    let html = '';
    try {
  html = highlighter.codeToHtml(code, { lang: lang === 'text' ? 'plaintext' : lang, theme: 'github-dark' });
  // Strip ALL background colors from the entire HTML (including theme backgrounds)
  html = html.replace(/background-color:\s*[^;]+;?/g, '');
  html = html.replace(/background:\s*[^;]+;?/g, '');
  // Remove any CSS classes that might contain background colors
  html = html.replace(/class="[^"]*"/g, '');
  // If bash/shell: remove inline color styles to show neutral text (no syntax coloring)
  if (['bash','shell','sh'].includes(lang)) {
    // Remove style attributes from spans to neutralize syntax coloring
    html = html.replace(/<span style="[^"]*">/g, (m) => '<span>');
  }
  // Wrap everything in a div that forces our background
  html = `<div style="background-color: #252830 !important; padding: 0; margin: 0;">${html}</div>`;
  // Tighten line height and force our custom background color for the generated <pre>
  html = html.replace(/<pre[^>]*>/g, '<pre style="line-height:1.25;background-color:#252830!important;background:none!important;margin:0;padding:1rem;overflow-x:auto"');
  // Ensure the inner <code> has no background or padding (remove pill effect on text)
  html = html.replace(/<code[^>]*>/g, '<code style="background:none!important;background-color:transparent!important;padding:0;border-radius:0;color:inherit"');
    } catch (_) {
      // Fallback to escaped plain text
      const safe = code
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
      html = `<pre style="line-height:1.25"><code>${safe}</code></pre>`;
    }
    // Escape for the copy attribute
    const escapeAttr = (str: string) => (str || '')
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/\"/g, '&quot;')
      .replace(/'/g, '&#39;');
    const escapedAttrCode = escapeAttr(code);
    return `
  <div class="code-block relative border border-gray-600 rounded-lg overflow-hidden my-6" data-lang="${lang || 'text'}" style="background-color: #252830 !important;">
        <div class="flex items-center justify-between px-4 py-2 bg-gray-700/30 border-b border-gray-600">
          <span class="text-xs text-gray-400 font-mono">${lang || 'text'}</span>
          <copy-button class="copy-btn" data-content="${escapedAttrCode}">
            <button class="px-2 py-1 bg-gray-700/70 hover:bg-gray-600/70 border border-gray-600 rounded text-xs text-gray-200 transition-colors flex items-center gap-1 shadow">
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              <span class="copy-text">Copy</span>
            </button>
          </copy-button>
        </div>
        <div class="relative overflow-x-auto p-0" style="--reset:0; background-color: #252830 !important;">
          ${html}
        </div>
      </div>`;
  }
  
  // Simple syntax highlighting function
  function highlightCode(code: string, language: string): string {
    // Escape HTML entities
    let safeCode = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    
    // Apply basic highlighting based on language
    if (language === 'typescript' || language === 'javascript' || language === 'ts' || language === 'js') {
      return highlightTypeScript(safeCode);
    } else if (language === 'python' || language === 'py') {
      return highlightPythonCodeServerSide(safeCode);
    } else if (language === 'bash' || language === 'shell' || language === 'sh') {
      return highlightBash(safeCode);
    }
    
    return safeCode;
  }
  
  // TypeScript syntax highlighting
  function highlightTypeScript(code: string): string {
    return code
      // Keywords
      .replace(/\b(const|let|var|function|class|interface|type|import|export|from|default|async|await|return|if|else|for|while|try|catch|finally|throw|new|this|super|extends|implements|public|private|protected|static|readonly)\b/g, '<span style="color: #c586c0; font-weight: 600;">$1</span>')
      // Types
      .replace(/\b(string|number|boolean|object|array|void|any|unknown|never)\b/g, '<span style="color: #4ec9b0; font-weight: 600;">$1</span>')
      // Strings
      .replace(/(["'`])((?:\\.|(?!\1)[^\\])*?)\1/g, '<span style="color: #ce9178;">$1$2$1</span>')
      // Numbers
      .replace(/\b(\d+\.?\d*)\b/g, '<span style="color: #b5cea8;">$1</span>')
      // Comments
      .replace(/(\/\/.*$)/gm, '<span style="color: #6a9955; font-style: italic;">$1</span>')
      .replace(/(\/\*[\s\S]*?\*\/)/g, '<span style="color: #6a9955; font-style: italic;">$1</span>');
  }
  
  // Bash syntax highlighting
  function highlightBash(code: string): string {
    return code
      // Commands
      .replace(/\b(npm|yarn|pnpm|git|cd|ls|mkdir|rm|cp|mv|cat|grep|find|chmod|sudo|curl|wget)\b/g, '<span style="color: #dcdcaa; font-weight: 600;">$1</span>')
      // Flags and options
      .replace(/(\s|^)(-+[a-zA-Z0-9-]+)/g, '$1<span style="color: #9cdcfe;">$2</span>')
      // Strings
      .replace(/(["'])((?:\\.|(?!\1)[^\\])*?)\1/g, '<span style="color: #ce9178;">$1$2$1</span>')
      // Comments
      .replace(/(#.*$)/gm, '<span style="color: #6a9955; font-style: italic;">$1</span>');
  }
  
  // Remove first heading since it's shown in page header
  let contentWithoutFirstTitle = markdown.replace(/^# .*$/m, '');

  // Extract fenced code blocks and replace with placeholders
  const CODE_PLACEHOLDER_PREFIX = '%%CODEBLOCK_';
  const codeSpecs: Array<{ lang: string; code: string }> = [];
  const fencedRegex = /```(\w+)?\n([\s\S]*?)```/g;
  let i = 0;
  const placeholderMarkdown = contentWithoutFirstTitle.replace(fencedRegex, (_m, lang, code) => {
    codeSpecs.push({ lang: lang || 'text', code: (code || '').trim() });
    return `${CODE_PLACEHOLDER_PREFIX}${i++}%%`;
  });
  // Render code blocks with Shiki
  const codeBlocks: string[] = [];
  for (const spec of codeSpecs) {
    codeBlocks.push(await createCodeBlock(spec.lang, spec.code));
  }
  
  let markdownHtml = placeholderMarkdown
    // Handle headers with IDs
    .replace(/^###### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h6 id="${id}" class="text-base font-semibold mb-2 mt-4 text-white">${text}</h6>`;
    })
    .replace(/^##### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h5 id="${id}" class="text-lg font-semibold mb-3 mt-5 text-white">${text}</h5>`;
    })
    .replace(/^#### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h4 id="${id}" class="text-xl font-semibold mb-3 mt-6 text-white">${text}</h4>`;
    })
    .replace(/^### (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h3 id="${id}" class="text-2xl font-semibold mb-4 mt-8 text-white pb-2">${text}</h3>`;
    })
    .replace(/^## (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h2 id="${id}" class="text-3xl font-bold mb-6 mt-10 text-white pb-3">${text}</h2>`;
    })
    .replace(/^# (.*$)/gim, (match, text) => {
      const id = generateHeadingId(text);
      return `<h1 id="${id}" class="text-4xl font-extrabold mb-8 mt-6 text-white pb-4">${text}</h1>`;
    })
    // Handle inline code
  .replace(/`([^`]+)`/g, '<code class="text-blue-300 text-sm font-mono" style="background:none;padding:0;border-radius:0">$1</code>')
    // Handle bold and italic
    .replace(/\*\*(.*?)\*\*/gim, '<strong class="font-semibold text-white">$1</strong>')
    .replace(/\*(.*?)\*/gim, '<em class="italic text-blue-200">$1</em>')
    // Handle images
    .replace(/!\[([^\]]*)\]\(([^)]*)\)/gim, '<img src="$2" alt="$1" class="max-w-full h-auto rounded-lg shadow-lg my-6 mx-auto block" />')
    // Handle links
    .replace(/\[([^\]]*)\]\(([^)]*)\)/gim, '<a href="$2" class="text-blue-400 hover:text-blue-300 underline">$1</a>');
  
  // Handle bullet points with proper nesting
  const lines = markdownHtml.split('\n');
  const processedLines = [];
  let inList = false;
  let listStack = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const trimmedLine = line.trim();
    // Preserve code block placeholders verbatim
    if (/^%%CODEBLOCK_\d+%%$/.test(trimmedLine)) {
      if (inList) {
        while (listStack.length > 0) {
          const lastList = listStack.pop();
          processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
        }
        inList = false;
      }
      processedLines.push(trimmedLine);
      continue;
    }
    
    // Check for list items
    const bulletMatch = line.match(/^(\s*)([-*+])\s+(.+)$/);
    const numberMatch = line.match(/^(\s*)(\d+\.)\s+(.+)$/);
    
    if (bulletMatch || numberMatch) {
      const match = bulletMatch || numberMatch;
      const indent = match[1].length;
      const content = match[3];
      const isNumbered = !!numberMatch;
      const level = Math.floor(indent / 2);
      
      if (!inList) {
        inList = true;
        listStack = [{ level, isNumbered }];
        processedLines.push(`<${isNumbered ? 'ol' : 'ul'} class="mb-6 space-y-2">`);
      } else {
        // Only close deeper nested lists, not siblings; prevents counter reset.
        while (listStack.length > 0 && listStack[listStack.length - 1].level > level) {
          const lastList = listStack.pop();
          processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
        }
        
        if (listStack.length === 0 || listStack[listStack.length - 1].level < level) {
          listStack.push({ level, isNumbered });
          processedLines.push(`<${isNumbered ? 'ol' : 'ul'} class="mt-2 space-y-1">`);
        }
      }
      
      processedLines.push(`<li class="text-gray-300 leading-relaxed">${content}</li>`);
    } else {
      if (inList) {
        while (listStack.length > 0) {
          const lastList = listStack.pop();
          processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
        }
        inList = false;
      }
      
      if (trimmedLine === '') {
        processedLines.push('');
      } else if (!trimmedLine.startsWith('<')) {
        processedLines.push(`<p class="mb-6 text-gray-300 leading-loose">${line}</p>`);
      } else {
        processedLines.push(line);
      }
    }
  }
  
  while (listStack.length > 0) {
    const lastList = listStack.pop();
    processedLines.push(`</${lastList.isNumbered ? 'ol' : 'ul'}>`);
  }
  
  // Restore placeholders with actual code block HTML
  let finalHtml = processedLines.join('\n');
  finalHtml = finalHtml.replace(/%%CODEBLOCK_(\d+)%%/g, (_m, idx) => codeBlocks[Number(idx)] || '');
  return finalHtml;
}

// Content rendering logic
let renderedContent = '';

if (currentFile) {
  if (currentFile.type === 'notebook' && currentFile.notebook) {
    // Use professional notebook rendering with notebookjs
    renderedContent = renderNotebookWithProfessionalTools(currentFile.notebook);
  } else if (currentFile.type === 'markdown' && currentFile.content) {
    // Use enhanced markdown rendering for both .md and .mdx files
    renderedContent = await renderEnhancedMarkdown(currentFile.content);
  }
}

// Function to generate GitHub URL for a tutorial file
function getGithubUrl(filePath: string): string {
  // Special case for README.md - it's in the root directory, not tutorials
  if (filePath === 'README.md') {
    return 'https://github.com/devonsunml/ai_builders_tutorial/tree/main';
  }
  
  const baseUrl = 'https://github.com/devonsunml/ai_builders_tutorial/blob/main/tutorials/';
  return baseUrl + filePath;
}

// Function to generate nbviewer URL for a notebook file
function getNbviewerUrl(filePath: string): string {
  const githubUrl = `https://github.com/devonsunml/ai_builders_tutorial/blob/main/tutorials/${filePath}`;
  return `https://nbviewer.org/github/devonsunml/ai_builders_tutorial/blob/main/tutorials/${filePath}`;
}
---

<div class="h-screen overflow-y-auto">
  {currentFile ? (
    <div class="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8">
      <!-- Tutorial Header -->
      <header class="mb-6 lg:mb-8">
        <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-dark-text mb-2">
          {currentFile.metadata.title}
        </h1>
        
        <!-- Metadata -->
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-6 text-sm text-dark-secondary">
          <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-6">
            {currentFile.metadata.author && (
              <div class="flex items-center gap-2">
                {currentFile.metadata.authorUrl ? (
                  <a 
                    href={currentFile.metadata.authorUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="flex items-center gap-2 text-dark-secondary hover:text-dark-text transition-colors cursor-pointer group"
                    title={`Visit ${currentFile.metadata.author}'s profile`}
                  >
                    {currentFile.metadata.authorPicture && (
                      <img 
                        src={currentFile.metadata.authorPicture} 
                        alt={`${currentFile.metadata.author} profile picture`}
                        class="w-6 h-6 rounded-full object-cover border border-gray-600 group-hover:border-gray-400 transition-colors duration-200"
                        onError="this.style.display='none'"
                      />
                    )}
                    <span>{currentFile.metadata.author}</span>
                  </a>
                ) : (
                  <div class="flex items-center gap-2">
                    {currentFile.metadata.authorPicture && (
                      <img 
                        src={currentFile.metadata.authorPicture} 
                        alt={`${currentFile.metadata.author} profile picture`}
                        class="w-6 h-6 rounded-full object-cover border border-gray-600"
                        onError="this.style.display='none'"
                      />
                    )}
                    <span>{currentFile.metadata.author}</span>
                  </div>
                )}
              </div>
            )}
            
            <div class="flex items-center gap-2">
              <span>Last updated: {formatDateMDY(currentFile.metadata.lastUpdated)}</span>
            </div>
          </div>
          
          <!-- View in Github Link -->
          <div class="flex items-center gap-2 sm:gap-4">
            <a 
              href={getGithubUrl(currentFile.path)}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center gap-1 text-dark-secondary hover:text-dark-text transition-colors"
            >
              <svg class="w-4 h-4 text-gray-800 dark:text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
              <span>View in Github</span>
            </a>
            
            {/* Only show nbviewer link for notebook files */}
            {currentFile.type === 'notebook' && (
              <a 
                href={getNbviewerUrl(currentFile.path)}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center gap-1 text-dark-secondary hover:text-dark-text transition-colors"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M7.5 2A1.5 1.5 0 0 0 6 3.5v17A1.5 1.5 0 0 0 7.5 22h9a1.5 1.5 0 0 0 1.5-1.5v-17A1.5 1.5 0 0 0 16.5 2h-9zM8 4h8v16H8V4zm1 2v2h2V6H9zm3 0v2h2V6h-2zm3 0v2h2V6h-2zM9 9v2h2V9H9zm3 0v2h2V9h-2zm3 0v2h2V9h-2zM9 12v2h2v-2H9zm3 0v2h2v-2h-2zm3 0v2h2v-2h-2zM9 15v2h2v-2H9zm3 0v2h2v-2h-2zm3 0v2h2v-2h-2z"/>
                </svg>
                <span>View in nbviewer</span>
              </a>
            )}
          </div>
        </div>
      </header>
      
      <!-- Tutorial Content -->
      <style>
        /* Force MDX code blocks to use the correct background color */
        .tutorial-content .code-block,
        .tutorial-content .code-block *,
        .tutorial-content pre,
        .tutorial-content pre *,
        .tutorial-content code {
          background-color: #252830 !important;
          background: #252830 !important;
        }

        /* Enable wrapping specifically for bash/shell code blocks */
        .tutorial-content .code-block[data-lang="bash"] pre,
        .tutorial-content .code-block[data-lang="bash"] code,
        .tutorial-content .code-block[data-lang="shell"] pre,
        .tutorial-content .code-block[data-lang="shell"] code,
        .tutorial-content .code-block[data-lang="sh"] pre,
        .tutorial-content .code-block[data-lang="sh"] code {
          white-space: pre-wrap !important;
          word-break: break-word !important;
          overflow-x: hidden !important;
        }
        
        /* Override any Shiki theme backgrounds */
        .tutorial-content [style*="background"] {
          background-color: #252830 !important;
          background: #252830 !important;
        }
        
        /* Force specific overrides for common Shiki classes */
        .tutorial-content .shiki,
        .tutorial-content .shiki *,
        .tutorial-content [class*="shiki"] {
          background-color: #252830 !important;
          background: #252830 !important;
        }

        /* ================= DataFrame / Wide Table Horizontal Scroll Fix ================= */
        /* Prevent overall page horizontal scroll while allowing per-output scroll */
        html, body { overflow-x: hidden; }

        /* Wrap applied via JS to avoid altering notebook HTML directly */
        .professional-notebook .nb-output .df-scroll-wrapper {
          max-width: 100%;
          overflow-x: auto;
          overflow-y: hidden;
          -webkit-overflow-scrolling: touch;
          border: 1px solid rgba(75,85,99,0.35);
          border-radius: 6px;
          padding: 4px 2px 6px 2px;
          margin: 0.35rem 0 0.85rem 0;
          background: #1f2123;
          position: relative;
        }
        .professional-notebook .nb-output .df-scroll-wrapper::-webkit-scrollbar { height: 10px; }
        .professional-notebook .nb-output .df-scroll-wrapper::-webkit-scrollbar-track { background: rgba(31,41,55,0.5); border-radius: 6px; }
        .professional-notebook .nb-output .df-scroll-wrapper::-webkit-scrollbar-thumb { background: rgba(75,85,99,0.55); border-radius: 6px; }
        .professional-notebook .nb-output .df-scroll-wrapper::-webkit-scrollbar-thumb:hover { background: rgba(107,114,128,0.7); }

        /* DataFrame table styling inside scroll wrapper */
        .professional-notebook .nb-output .df-scroll-wrapper table.dataframe {
          width: max-content;        /* natural width enables horizontal scroll */
          min-width: 100%;           /* ensures wrapper gets scrollbar even if narrow */
          margin: 0;
          border-collapse: collapse;
          white-space: nowrap;       /* keep columns on one line */
        }
        .professional-notebook .nb-output table.dataframe { border-collapse: collapse; }
        .professional-notebook .nb-output table.dataframe th,
        .professional-notebook .nb-output table.dataframe td {
          padding: 6px 10px;
          border: 1px solid rgba(75,85,99,0.4);
          font-size: 13px;
        }
        .professional-notebook .nb-output table.dataframe thead th {
          position: sticky; top: 0; z-index: 2; background: #1f2123; backdrop-filter: blur(2px);
        }
        .professional-notebook .nb-output table.dataframe tbody tr:nth-child(odd) { background: rgba(255,255,255,0.02); }
        .professional-notebook .nb-output table.dataframe tbody tr:hover { background: rgba(255,255,255,0.04); }

        /* Allow text wrapping for very verbose JSON-like columns on hover to inspect content */
        .professional-notebook .nb-output .df-scroll-wrapper td { max-width: 340px; overflow: hidden; text-overflow: ellipsis; }
        .professional-notebook .nb-output .df-scroll-wrapper td:hover { white-space: normal; max-width: 520px; }

        /* Guard against nested tables expanding width */
        .professional-notebook .nb-output .df-scroll-wrapper table table { width: auto; }
        /* ============================================================================= */
        /* Ordered List Numbering Fix for MDX/Tutorial Content */
        /* The earlier global rules removed native list-style and applied counters, which
           caused all items to appear as '1.' in some MDX-rendered lists. We restore
           native numbering specifically inside .tutorial-content while keeping the
           custom styling for notebook-rendered (.professional-notebook) content. */
        .tutorial-content ol {
          list-style: decimal outside !important;
          counter-reset: none !important;
          margin: 1rem 0 1.25rem 1.5rem !important;
          padding-left: 0 !important;
        }
        .tutorial-content ol li {
          counter-increment: none !important;
          position: static !important;
          padding-left: 0 !important;
        }
        .tutorial-content ol li::before {
          content: none !important;
        }
        /* Defensive fallback: if some global script removes list-style, reintroduce numbers */
        .tutorial-content ol.fallback-counter,
        .tutorial-content .force-ol-counter {
          counter-reset: item;
          list-style: none !important;
          margin-left: 0 !important;
        }
        .tutorial-content ol.fallback-counter > li,
        .tutorial-content .force-ol-counter > li {
          counter-increment: item;
          position: relative;
          padding-left: 1.75rem !important;
        }
        .tutorial-content ol.fallback-counter > li::before,
        .tutorial-content .force-ol-counter > li::before {
          content: counter(item) '.';
          position: absolute;
          left: 0;
          color: #60a5fa;
          font-weight: 500;
        }
        /* Ensure unordered lists still look clean without interfering with numbering */
        .tutorial-content ul {
          list-style: disc outside !important;
          margin: 1rem 0 1.25rem 1.5rem !important;
          padding-left: 0 !important;
        }
        .tutorial-content ul li {
          position: static !important;
          padding-left: 0 !important;
        }
      </style>
      <div class="tutorial-content">
        <div set:html={renderedContent}></div>
      </div>
    </div>
  ) : (
    <!-- No Tutorial Selected -->
    <div class="h-full flex items-center justify-center p-4">
      <div class="text-center max-w-md">
        <div class="mb-6">
          <svg class="w-12 h-12 sm:w-16 sm:h-16 mx-auto text-dark-secondary opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
        </div>
        
        <h2 class="text-xl sm:text-2xl font-bold text-dark-text mb-3">
          Welcome to AI Builders Tutorial
        </h2>
        
        <p class="text-dark-secondary mb-6">
          Select a tutorial from the sidebar to get started with your AI development journey.
        </p>
        
        <div class="text-sm text-dark-secondary">
          <p class="mb-2">📚 Interactive Jupyter Notebooks</p>
          <p class="mb-2">📖 Comprehensive Markdown Guides</p>
          <p>🔍 Full-text Search</p>
        </div>
      </div>
    </div>
  )}
</div>

<!-- Copy Button Component -->
<copy-button class="hidden">
  <button class="px-3 py-1 bg-dark-surface hover:bg-dark-hover border border-dark-border rounded text-xs text-dark-secondary transition-colors">
    Copy
  </button>
</copy-button>

<script>
  // Custom element for copy buttons (enhanced version)
  class CopyButton extends HTMLElement {
    constructor() {
      super();
      
      const content = this.getAttribute('data-content') || '';
      
      // Check if button HTML is already present
      if (!this.querySelector('button')) {
        this.innerHTML = `
          <button class="px-2 py-1 bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600 rounded text-xs text-gray-300 transition-colors flex items-center gap-1">
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            <span class="copy-text">Copy</span>
          </button>
        `;
      }
      
      const button = this.querySelector('button');
      const copyText = this.querySelector('.copy-text');
      
      if (button && copyText) {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          try {
            // Decode HTML entities in the content
            const decodedContent = content
              .replace(/&quot;/g, '"')
              .replace(/&#39;/g, "'")
              .replace(/&amp;/g, '&')
              .replace(/&lt;/g, '<')
              .replace(/&gt;/g, '>');
              
            await navigator.clipboard.writeText(decodedContent);
            copyText.textContent = 'Copied!';
            copyText.classList.add('text-green-400');
            setTimeout(() => {
              copyText.textContent = 'Copy';
              copyText.classList.remove('text-green-400');
            }, 2000);
          } catch (err) {
            console.error('Failed to copy:', err);
            copyText.textContent = 'Failed';
            copyText.classList.add('text-red-400');
            setTimeout(() => {
              copyText.textContent = 'Copy';
              copyText.classList.remove('text-red-400');
            }, 2000);
          }
        });
      }
    }
  }
  
  // Register the custom element
  customElements.define('copy-button', CopyButton);
  
  // Python syntax highlighting function (client-side)
  function highlightPythonCode(code) {
    // Escape HTML entities first
    let safeCode = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    
    // Tokenize the code to avoid overlapping replacements
    let tokens = [];
    let lines = safeCode.split('\n');
    
    for (let lineNum = 0; lineNum < lines.length; lineNum++) {
      let line = lines[lineNum];
      let result = '';
      let i = 0;
      
      while (i < line.length) {
        let matched = false;
        
        // Skip whitespace
        if (line[i] === ' ' || line[i] === '\t') {
          result += line[i];
          i++;
          continue;
        }
        
        // Check for comments
        if (line[i] === '#') {
          result += '<span style="color: #6a9955; font-style: italic;">' + line.substring(i) + '</span>';
          break;
        }
        
        // Check for strings
        if (line[i] === '"' || line[i] === "'") {
          let quote = line[i];
          let start = i;
          i++; // Skip opening quote
          while (i < line.length && line[i] !== quote) {
            if (line[i] === '\\') i++; // Skip escaped characters
            i++;
          }
          if (i < line.length) i++; // Include closing quote
          result += '<span style="color: #ce9178;">' + line.substring(start, i) + '</span>';
          matched = true;
        }
        
        // Check for numbers
        else if (/\d/.test(line[i])) {
          let start = i;
          while (i < line.length && /[\d.]/.test(line[i])) i++;
          result += '<span style="color: #b5cea8;">' + line.substring(start, i) + '</span>';
          matched = true;
        }
        
        // Check for identifiers (keywords, functions, etc.)
        else if (/[a-zA-Z_]/.test(line[i])) {
          let start = i;
          while (i < line.length && /[a-zA-Z0-9_]/.test(line[i])) i++;
          let word = line.substring(start, i);
          
          // Check if it's a keyword
          if (['def', 'class', 'import', 'from', 'if', 'elif', 'else', 'for', 'while', 'try', 'except', 'finally', 'with', 'as', 'return', 'yield', 'break', 'continue', 'pass', 'assert', 'del', 'global', 'nonlocal', 'lambda', 'and', 'or', 'not', 'in', 'is', 'async', 'await'].includes(word)) {
            result += '<span style="color: #c586c0; font-weight: 600;">' + word + '</span>';
          }
          // Check if it's a built-in constant
          else if (['True', 'False', 'None'].includes(word)) {
            result += '<span style="color: #569cd6; font-weight: 600;">' + word + '</span>';
          }
          // Check if it's a function call (followed by opening parenthesis)
          else if (i < line.length && line[i] === '(') {
            result += '<span style="color: #dcdcaa;">' + word + '</span>';
          }
          // Regular identifier
          else {
            result += word;
          }
          matched = true;
        }
        
        if (!matched) {
          result += line[i];
          i++;
        }
      }
      
      tokens.push(result);
    }
    
    return tokens.join('\n');
  }
  
  // Add copy functionality and syntax highlighting to professional notebook code cells
  document.addEventListener('DOMContentLoaded', function() {
    // Force all hyperlinks in tutorial & notebook content to open in a new tab
    function externalizeLinks() {
      const scopeSelectors = ['.tutorial-content', '.professional-notebook'];
      scopeSelectors.forEach(sel => {
        document.querySelectorAll(sel + ' a[href]')?.forEach((a) => {
          // Skip if it's an anchor link to same page id
          const href = a.getAttribute('href') || '';
          if (href.startsWith('#')) return;
          a.setAttribute('target', '_blank');
          // Preserve existing rel parts, ensure security tokens present
            const relExisting = (a.getAttribute('rel') || '').split(/\s+/).filter(Boolean);
            ['noopener','noreferrer'].forEach(r => { if (!relExisting.includes(r)) relExisting.push(r); });
            a.setAttribute('rel', relExisting.join(' '));
        });
      });
    }
    externalizeLinks();
    // Re-run after any dynamic injections
    setTimeout(externalizeLinks, 500);
    setTimeout(externalizeLinks, 1500);
    // Ordered list numbering sanity check & fallback application
    function fixOrderedLists() {
      const ols = document.querySelectorAll('.tutorial-content ol');
      ols.forEach(ol => {
        // If browser computed style says 'list-style-type: none', apply fallback counter
        const style = window.getComputedStyle(ol);
        if (style.listStyleType === 'none') {
          ol.classList.add('fallback-counter');
        }
      });
    }
    fixOrderedLists();
    setTimeout(fixOrderedLists, 500);
    setTimeout(fixOrderedLists, 1500);
    /* ================= DataFrame Scroll Wrapper Injection ================= */
    function wrapDataFrames(scope=document) {
      const tables = scope.querySelectorAll('.professional-notebook .nb-output table.dataframe:not([data-wrapped])');
      tables.forEach(table => {
        // Skip if already inside our wrapper
        if (table.closest('.df-scroll-wrapper')) return;
        const wrapper = document.createElement('div');
        wrapper.className = 'df-scroll-wrapper';
        table.parentNode.insertBefore(wrapper, table);
        wrapper.appendChild(table);
        table.setAttribute('data-wrapped', 'true');
      });
    }

    function reflowIfOverflow() {
      // Minor layout tweak to ensure parent containers don't expand
      const notebookRoot = document.querySelector('.professional-notebook');
      if (notebookRoot) {
        notebookRoot.style.maxWidth = '100%';
        notebookRoot.style.overflowX = 'hidden';
      }
    }

    // Initial attempt
    wrapDataFrames();
    reflowIfOverflow();
    // Secondary passes (notebook rendering may be async)
    setTimeout(() => { wrapDataFrames(); reflowIfOverflow(); }, 600);
    setTimeout(() => { wrapDataFrames(); reflowIfOverflow(); }, 1500);

    // Observe future mutations (e.g., dynamic notebook rerenders)
    const observer = new MutationObserver(mutations => {
      let needsWrap = false;
      for (const m of mutations) {
        if (m.addedNodes && m.addedNodes.length) {
          m.addedNodes.forEach(n => {
            if (n.nodeType === 1 && (n.matches?.('table.dataframe') || n.querySelector?.('table.dataframe'))) {
              needsWrap = true;
            }
          });
        }
      }
      if (needsWrap) {
        wrapDataFrames();
        reflowIfOverflow();
      }
    });
    observer.observe(document.body, { subtree: true, childList: true });
    /* ====================================================================== */
    
    // Force background colors on all code-related elements
    function forceCodeCellBackgrounds() {
      
      // Target all possible code cell containers
      const codeElements = document.querySelectorAll([
        '.professional-notebook .nb-input',
        '.professional-notebook .nb-cell:has(.nb-input)',
        '.professional-notebook [class*="nb-input"]',
        '.professional-notebook [class*="code"]',
        '.nb-input',
        '.nb-cell:has(pre)',
        '.nb-cell:has(code)',
        'div[class*="nb-input"]'
      ].join(', '));
      
      codeElements.forEach(element => {
        element.style.backgroundColor = '#24282e';
        element.style.setProperty('background-color', '#24282e', 'important');
      });
      
      // Target markdown cells and ensure they match app background
      const markdownElements = document.querySelectorAll([
        '.professional-notebook .nb-cell-type-markdown',
        '.professional-notebook .nb-cell:not(:has(.nb-input))',
        '.professional-notebook .nb-markdown',
        '.professional-notebook .nb-cell .nb-markdown',
        '.notebook-cell.markdown-cell',
        '.markdown-cell'
      ].join(', '));
      
      markdownElements.forEach(element => {
        element.style.backgroundColor = '#1f2123';
        element.style.setProperty('background-color', '#1f2123', 'important');
      });
      
      // Make sure markdown content areas are transparent
      const markdownContentElements = document.querySelectorAll([
        '.professional-notebook .nb-markdown',
        '.notebook-cell .cell-content',
        '.cell-content.prose',
        '.markdown-cell .cell-content'
      ].join(', '));
      
      markdownContentElements.forEach(element => {
        element.style.backgroundColor = 'transparent';
        element.style.setProperty('background-color', 'transparent', 'important');
      });
      
      // Force output cells to have the new background color
      const outputElements = document.querySelectorAll([
        '.professional-notebook .nb-output',
        '.output-display-data',
        '.output-stream',
        '.output-plain',
        '.cell-output',
        '.notebook-cell .cell-output'
      ].join(', '));
      
      outputElements.forEach(element => {
        element.style.backgroundColor = '#1f2123';
        element.style.setProperty('background-color', '#1f2123', 'important');
      });
      
      // Force code blocks within output cells to also use the output background color
      const outputCodeBlocks = document.querySelectorAll([
        '.professional-notebook .nb-output .code-block',
        '.output-display-data .code-block',
        '.output-stream .code-block', 
        '.output-plain .code-block',
        '.cell-output .code-block',
        '.notebook-cell .cell-output .code-block',
        '.markdown-output .code-block',
        '.professional-notebook .nb-output pre',
        '.output-display-data pre',
        '.markdown-output pre'
      ].join(', '));
      
      outputCodeBlocks.forEach(element => {
        element.style.backgroundColor = '#1f2123';
        element.style.setProperty('background-color', '#1f2123', 'important');
      });
    }
    
    // Apply immediately and after notebook rendering
    forceCodeCellBackgrounds();
    
    // Wait a bit for the notebook to render
    setTimeout(() => {
      forceCodeCellBackgrounds(); // Apply again after notebook loads
      
      // Target the actual code input elements generated by notebookjs
      const codeInputs = document.querySelectorAll('.professional-notebook .nb-input');
      
      // Also check for alternative selectors
      const alternativeInputs = document.querySelectorAll('.professional-notebook .nb-cell');
      
      codeInputs.forEach((cell, index) => {
        
        // Find the source code element - notebookjs uses <pre> elements, not .nb-source
        let sourceElement = cell.querySelector('.nb-source');
        if (!sourceElement) {
          // Try alternative selectors that notebookjs actually uses
          sourceElement = cell.querySelector('pre') || cell.querySelector('code');
        }
        
        if (sourceElement) {
          
          // Get the original code text and store it as a data attribute
          const originalCode = sourceElement.textContent || sourceElement.innerText || '';
          cell.setAttribute('data-original-code', originalCode);
          
          // Apply Python syntax highlighting
          if (originalCode.trim()) {
            const highlightedCode = highlightPythonCode(originalCode);
            sourceElement.innerHTML = highlightedCode;
          }
        }
        
        // Add click handler for the pseudo-element copy button
        cell.addEventListener('click', function(e) {
          // Check if click is in the copy button area (top-right corner)
          const rect = cell.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          const clickY = e.clientY - rect.top;
          
          // Copy button area is approximately 40px from right and 40px from top
          if (clickX > rect.width - 40 && clickY < 40) {
            e.preventDefault();
            
            // Get the original code from the data attribute
            const codeText = cell.getAttribute('data-original-code') || '';
            
            if (codeText.trim()) {
              
              // Copy to clipboard
              if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(codeText).then(() => {
                  // Show success feedback
                  cell.classList.add('copy-success');
                  setTimeout(() => {
                    cell.classList.remove('copy-success');
                  }, 2000);
                }).catch(err => {
                  console.error('Clipboard API failed:', err);
                  fallbackCopy(codeText, cell);
                });
              } else {
                // Fallback for older browsers
                fallbackCopy(codeText, cell);
              }
            } else {
              console.error('No code text found for copying');
            }
          }
        });
        
        // Add hover cursor styling for the copy button area
        cell.addEventListener('mousemove', function(e) {
          const rect = cell.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          if (mouseX > rect.width - 40 && mouseY < 40) {
            cell.style.cursor = 'pointer';
          } else {
            cell.style.cursor = 'default';
          }
        });
      });
      
      function fallbackCopy(text, cell) {
        // Create temporary textarea for older browsers
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.style.position = 'fixed';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        textarea.select();
        
        try {
          const successful = document.execCommand('copy');
          if (successful) {
            cell.classList.add('copy-success');
            setTimeout(() => {
              cell.classList.remove('copy-success');
            }, 2000);
          }
        } catch (err) {
          console.error('Fallback copy failed:', err);
        } finally {
          document.body.removeChild(textarea);
        }
      }
    }, 1000); // Increased timeout to ensure notebook is fully rendered
    
    // Additional attempt with longer timeout in case notebook takes time to render
    setTimeout(() => {
      const codeInputs = document.querySelectorAll('.professional-notebook .nb-input');
      
      codeInputs.forEach((cell, index) => {
        // Try to find source element using the same logic as the first attempt
        let sourceElement = cell.querySelector('.nb-source');
        if (!sourceElement) {
          sourceElement = cell.querySelector('pre') || cell.querySelector('code');
        }
        
        if (sourceElement && !cell.hasAttribute('data-highlighted')) {
          const originalCode = sourceElement.textContent || sourceElement.innerText || '';
          if (originalCode.trim()) {
            const highlightedCode = highlightPythonCode(originalCode);
            sourceElement.innerHTML = highlightedCode;
            cell.setAttribute('data-highlighted', 'true');
            cell.setAttribute('data-original-code', originalCode);
          }
        }
      });
      
      // Note: Removed automatic highlighting of output cells to preserve plain text appearance
    }, 2000);
    
    // Add IDs to headings for proper navigation in both notebook and markdown content
    setTimeout(() => {
      
      function generateHeadingId(text) {
        return text.toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
      }
      
      // Find all headings in the content area
      const headings = document.querySelectorAll('.professional-notebook h1, .professional-notebook h2, .professional-notebook h3, h1, h2, h3');
      
      headings.forEach(heading => {
        if (!heading.id) {
          const text = heading.textContent || heading.innerText || '';
          const id = generateHeadingId(text);
          if (id) {
            heading.id = id;
          }
        }
      });
      
      // Final pass to ensure code cell backgrounds are correct
      forceCodeCellBackgrounds();
      
      // Only highlight input code blocks, not output cells
      const inputCodeBlocks = document.querySelectorAll('pre code:not(.nb-output pre code):not(.output-display-data code):not(.markdown-output code):not(.cell-output code), .code-block code:not(.nb-output .code-block code):not(.output-display-data .code-block code):not(.markdown-output .code-block code)');
      
      inputCodeBlocks.forEach((codeElement) => {
        if (!codeElement.hasAttribute('data-highlighted')) {
          const originalCode = codeElement.textContent || codeElement.innerText || '';
          if (originalCode.trim()) {
            // Check if it looks like Python code (more comprehensive check)
            const looksLikePython = /(?:import\s+\w+|from\s+\w+\s+import|def\s+\w+|class\s+\w+|print\s*\(|=\s*[\[\{]|if\s+\w+|for\s+\w+\s+in|with\s+open\(|pd\.|csv\.|np\.)/i.test(originalCode);
            
            if (looksLikePython) {
              const highlightedCode = highlightPythonCode(originalCode);
              codeElement.innerHTML = highlightedCode;
              codeElement.setAttribute('data-highlighted', 'true');
            }
          }
        }
      });
    }, 500); // Run earlier to ensure headings have IDs before other scripts
    
    // Also run after a longer delay to catch any late-loading elements
    setTimeout(() => {
      forceCodeCellBackgrounds();
    }, 2000);
  });
</script>
